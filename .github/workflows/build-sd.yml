name: Build & Release Alpine Edge SD Images

on:
  workflow_dispatch:

jobs:
  build-sd:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout repo
      - uses: actions/checkout@v3

      # 2) Enable QEMU/binfmt so Buildx can cross-compile
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      # 3) Initialize Docker Buildx
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2

      # 4) Build container rootfs for each ARCH into local folders
      - name: Build rootfs for armhf & arm64
        run: |
          mkdir -p out
          for ARCH in armhf arm64; do
            docker buildx build \
              --platform linux/$ARCH \
              --file Dockerfile \
              --output type=local,dest=out/$ARCH \
              .
          done

      # 5) Assemble full SD-card .img files
      - name: Create SD-card images
        run: |
          sudo modprobe loop
          mkdir dist
          for ARCH in armhf arm64; do
            WORK=out/$ARCH
            IMG=sd-${ARCH}.img

            # compute size: rootfs size + 200â€‰MiB
            BYTES=$(du -sb $WORK | cut -f1)
            MB=$(( (BYTES + 200*1024*1024 + 1024*1024 -1)/(1024*1024) ))

            # allocate image
            dd if=/dev/zero of=$IMG bs=1M count=$MB status=none

            # partition: single ext4, bootable
            parted $IMG --script \
              mklabel msdos \
              mkpart primary ext4 1MiB 100% \
              set 1 boot on

            # mount via loop
            LOOP=$(sudo losetup --show -fP $IMG)
            sudo mkfs.ext4 -F ${LOOP}p1
            MNT=$(mktemp -d)
            sudo mount ${LOOP}p1 $MNT

            # copy entire rootfs + /boot
            sudo cp -a $WORK/* $MNT/

            # cleanup
            sudo umount $MNT
            sudo losetup -d $LOOP
            mv $IMG dist/
          done

      # 6) Compute a date-based tag
      - name: Compute release tag
        id: compute_tag
        run: |
          DATE=$(date +%Y%m%d)
          COUNT=$(( $(git tag | grep "^${DATE}\." | wc -l) + 1 ))
          echo "TAG=${DATE}.${COUNT}" >> $GITHUB_ENV

      # 7) Publish a GitHub Release and attach the .img files
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          name: Release ${{ env.TAG }}
          files: dist/*.img
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
