name: Build Image

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout your code
      - uses: actions/checkout@v3

      # 2) Auto-register QEMU/binfmt for all architectures
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      # 3) Cache your miniroot downloads, etc.
      - name: Build Cache
        id: build-cache
        uses: actions/cache@v3
        with:
          path: cache
          # <-- notice separate globs as separate args to hashFiles()
          key: ${{ runner.os }}-docker-cache-${{ hashFiles('docker-build.sh','check-docker-binfmt.sh') }}
          restore-keys: |
            ${{ runner.os }}-docker-cache-

      # 4) Verify binfmt_misc + QEMU-static wiring
      - name: Verify binfmt_misc
        run: |
          ./check-docker-binfmt.sh

      # 5) Cross-arch builds
      - name: Build armhf (rpi)
        run: ARCH=armhf FLAVOR=rpi ./docker-build.sh

      - name: Build aarch64 (rpi)
        run: ARCH=aarch64 FLAVOR=rpi ./docker-build.sh

      - name: Build virt
        run: FLAVOR=virt ./docker-build.sh

      - name: Build lts
        run: FLAVOR=lts ./docker-build.sh

      # 6) List the outputs
      - name: List artifacts
        run: ls -lh dist

      # 7) Compute a date-based tag
      - name: Compute release tag
        id: compute_tag
        run: |
          DATE=$(date +%Y%m%d)
          COUNT=$(( $(git tag | grep "^${DATE}\." | wc -l) + 1 ))
          echo "TAG=${DATE}.${COUNT}" >> $GITHUB_ENV

      # 8) Create or update the GitHub Release and upload all dist/* assets
      - name: Publish Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          name: Release ${{ env.TAG }}
          files: dist/*
